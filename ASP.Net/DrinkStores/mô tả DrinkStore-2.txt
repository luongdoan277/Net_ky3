* Lệnh xóa database
  dotnet ef database drop --force --context [StoreDbContext trong model]
  -nếu khô tìm thấy project
  dotnet ef database drop --project [Tên project]--force --context StoreDbContext
khi nào cần sửa lại nội dung của database

* chú ý: nếu sửa database xong chạy lại nếu bị lỗi SaveChanges()
   -xóa lại database và xóa migrations rồi mới chạy chương trình
	lệnh xóa Migrations: dotnet ef migrations remove

* lỗi: login failed for used , sửa: thêm vào ConnectionStrings: Integrated Security=True;

Bước 1: using model vào homecontroler
	Tạo respository vào Homecontroller để đẩy dữ liệu sang index
	private IStoreRepository repository;

        public HomeController(IStoreRepository repo)
        {
            repository = repo;
        }

        public IActionResult Index() => View(repository.Drinks);

bước 2: sửa bên trong file index.cshtml
	<div>
        <h3>@p.Name</h3>
        @p.Description
        <h4>@p.Price.ToString("c")</h4> //format chuỗi tiền tệ
        </div>
bước 3: phân trang
//thêm vào trong Homecontroller

public int PageSize = 4; 
quy định trang có bao nhiêu phần tử

public ViewResult Index(int drinkPage = 1)
            => View(repository.Drinks
                .OrderBy(p => p.DrinkID)
                .Skip((drinkPage - 1) * PageSize)
                .Take(PageSize)
                );
-skip bỏ qua bao nhiêu bản ghi
-OrderBy sắp sếp sản phẩm theo ID



//Tạo nút phân trang


bước 5: tạo file trong model viewmodel > paginginfo

	public int TotalItems { get; set; } tổng số Lượng các phần tử

        public int ItemsPerPage { get; set; } các mục trên mỗi trang

        public int CurrentPage { get; set; } tổng số trang

        public int TotalPages => (int)Math.Ceiling((decimal)TotalItems / ItemsPerPage);



 bước 6: trong DrinkStores tạo một thư mục Infrastructure

        trong Infrastructure tạo file PageLinkTagHelper.cs

        using Microsoft.AspNetCore.Mvc;
	using Microsoft.AspNetCore.Mvc.Rendering;
	using Microsoft.AspNetCore.Mvc.Routing;
	using Microsoft.AspNetCore.Mvc.ViewFeatures;
	using Microsoft.AspNetCore.Razor.TagHelpers;
	using DrinkStores.Models.ViewModels;

namespace DrinkStores.Infrastructure
{

    [HtmlTargetElement("div", Attributes="page-model")]

    public class PageLinkTagHelper : TagHelper
    {
        private IUrlHelperFactory urlHelperFactory;

        public PageLinkTagHelper(IUrlHelperFactory helperFactory)
        {
            urlHelperFactory = helperFactory;
        }

       [ViewContext]
       [HtmlAttributeNotBound]

       public ViewContext ViewContext { get; set; }

       public PagingInfo PageModel { get; set; }

        public string PageAction { get; set; }

        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            IUrlHelper urlHelper = urlHelperFactory.GetUrlHelper(ViewContext);
            TagBuilder result = new TagBuilder("div");
            for(int i = 1; i <= PageModel.TotalPages; i++)
            {
                TagBuilder tag = new TagBuilder("a");
                tag.Attributes["href"] = urlHelper.Action(PageAction, new
                {
                    drinkPage = i
                });
                tag.InnerHtml.Append(i.ToString());
                result.InnerHtml.AppendHtml(tag);
            }
            output.Content.AppendHtml(result.InnerHtml);
        }
    }
}

Bước 5 : Add using DrinkStores.Models.ViewModels
	 .........
	 addTagHelper *, AhihiStore 
	 => _ViewImports.cshtml(folder View)

Bước 7: thêm file ProductsListViewModel.cs 

        //tao view model data
        public IEnumerable<Drink> Drinks { get; set; }

        public PagingInfo PagingInfo { get; set; }


bước 8: trong HomeController sửa 

        //public ViewResult Index(int drinkPage = 1)
        //    => View(repository.Drinks
        //        .OrderBy(p => p.DrinkID)
        //        .Skip((drinkPage - 1) * PageSize)
        //        .Take(PageSize)
        //        );

        public ViewResult Index(int productpage = 1)
            => View(new ProductsListViewModel
            {
                Drinks = repository.Drinks
                .OrderBy(p => p.DrinkID)
                .Skip((productpage - 1) * PageSize)
                .Take(PageSize),
                PagingInfo = new PagingInfo
                {
                    CurrentPage = productpage,
                    ItemsPerPage = PageSize,
                    TotalItems = repository.Drinks.Count()
                }
            });

bước 8: bên trong index.cshtml






